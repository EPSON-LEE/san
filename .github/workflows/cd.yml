name: CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        service: [frontend, backend]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/${{ matrix.service == 'frontend' && 'pc' || 'server' }}/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: staging
      url: https://staging.decode.example.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 这里可以添加具体的部署脚本
        # 例如：kubectl apply -f k8s/staging/
        # 或者：docker-compose -f docker-compose.staging.yml up -d
        
    - name: Run health checks
      run: |
        echo "Running health checks..."
        # 添加健康检查脚本
        # curl -f https://staging.decode.example.com/health || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    
    environment:
      name: production
      url: https://decode.example.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 这里可以添加具体的生产环境部署脚本
        # 例如：kubectl apply -f k8s/production/
        # 或者：docker-compose -f docker-compose.prod.yml up -d
        
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # 添加生产环境健康检查脚本
        # curl -f https://decode.example.com/health || exit 1
        
    - name: Notify deployment success
      run: |
        echo "Production deployment completed successfully!"
        # 可以添加通知逻辑，如发送邮件、Slack消息等

  security-scan-images:
    runs-on: ubuntu-latest
    needs: build-and-push
    
    strategy:
      matrix:
        service: [frontend, backend]
        
    steps:
    - name: Run Trivy vulnerability scanner on images
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results-${{ matrix.service }}.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-results-${{ matrix.service }}.sarif'